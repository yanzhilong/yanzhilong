<%@ CodeTemplate Language="C#" TargetLanguage="C#" Description="Generates a C# class for use with NHibnate" %>
<%@ Property Name="DomainName" Type="System.String" Default="Domain" Category="Object" Description="Table that the mapping file is based on" %>
<%@ Property Name="DomainAttribute" Type="System.String" Default="编号:string:Id" Category="Object" Description="实体类属性(,号隔开多个属性,:隔开注释类型和名称)" %>
<%@ Property Name="DomainNamespace" Type="System.String" Default="Crs.Core.Domain.Domains" Category="Object" Description="The class namespace that the mapping file should use" %>
<%@ Property Name="ServiceNamespace" Type="System.String" Default="Crs.Services.Services" Category="Object" Description="The class namespace that the mapping file should use" %>
<%@ Import Namespace="System.Collections.Generic" %>
using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Crs.Core.Infrastructure;
using <%=ServiceNamespace%>;
using <%=DomainNamespace%>;
<%
    
    string serviceName =  DomainName+"Service";
    serviceName = MakeCamel(serviceName);
    
    string domainName = MakeCamel(DomainName);
    
    string domainstringname = null;
    List<string[]>attributes = new List<string[]>();
    foreach(string str in DomainAttribute.Split(',')){
        string[] aa = str.Split(':');
        if(aa[1].Equals("string") && !(aa[2].Equals("Id"))){
            domainstringname = aa[2];
            break;
        }
    }
%>

/// <summary>
/// 使用CodeSmith自动生成
/// </summary>
namespace Crs.Services.Tests.ServiceTests
{
    [TestClass]
    public class <%=DomainName%>ServiceTest
    {
        static I<%=DomainName%>Service <%=serviceName%>;

        [ClassInitialize]
        public static void Init(TestContext context)
        {
            EngineContext.Initialize(false);
            <%=serviceName%> = EngineContext.Current.Resolve<I<%=DomainName%>Service>();
        }


        [TestInitialize]
        public void BeforeTest()
        {
            Console.WriteLine("测试之前");
        }


        [TestMethod]
        public void CreateTest()
        {
            <%=DomainName%> <%=domainName%> = new <%=DomainName%>();
            <%=domainName%>.Id = Guid.NewGuid().ToString();
            
            <%=serviceName%>.AddEntry(<%=domainName%>);

            <%=DomainName%> <%=domainName%>result = <%=serviceName%>.GetEntry(new <%=DomainName%> { Id = <%=domainName%>.Id });
            Assert.IsNotNull(<%=domainName%>result);
        }

        [TestMethod]
        public void DeleteTest()
        {
            <%=DomainName%> <%=domainName%> = new <%=DomainName%>();
            <%=domainName%>.Id = "";

            <%=serviceName%>.DeleteEntry(<%=domainName%>);

           <%=DomainName%> <%=domainName%>result = <%=serviceName%>.GetEntry(new <%=DomainName%> { Id = <%=domainName%>.Id });
            Assert.IsNull(<%=domainName%>result);
        }

        [TestMethod]
        public void UpdateTest()
        {
            <%=DomainName%> <%=domainName%> = new <%=DomainName%>();
            <%=domainName%>.Id = "";
            <%if(domainstringname != null){%>
            <%=domainName%>.<%=domainstringname%> = "NewValue";

            <%=serviceName%>.UpdateEntry(<%=domainName%>);

            <%=DomainName%> <%=domainName%>result = <%=serviceName%>.GetEntry(new <%=DomainName%> { Id = <%=domainName%>.Id });
            Assert.AreEqual(<%=domainName%>result.<%=domainstringname%>, <%=domainName%>.<%=domainstringname%>);
            <%}%>
        }

        [TestMethod]
        public void GetTest()
        {
            <%=DomainName%> <%=domainName%> = new <%=DomainName%>();
            <%=domainName%>.Id = "";

            <%=DomainName%> <%=domainName%>result = <%=serviceName%>.GetEntry(new <%=DomainName%> { Id = <%=domainName%>.Id });
            Assert.IsNotNull(<%=domainName%>result);
        }

        [TestCleanup]
        public void AfterTest()
        {
            Console.WriteLine("测试之后");
        }


        [ClassCleanup]
        public static void Cleanup()
        {
            Console.WriteLine("所有测试之后");

        }
    }
}
<script runat="template">
/// <summary>
/// 获取首字母小写的字符串
/// </summary>
/// <param name="value">字符串(例如:Xiangyisheng)</param>
/// <returns>Xiangyisheng => xiangyisheng</returns>
public string MakeCamel(string value)
{
    return value.Substring(0, 1).ToLower() + value.Substring(1);
}
</script>
